package org.dei.perla.lang.executor.expression;

import org.dei.perla.core.descriptor.DataType;
import org.dei.perla.core.sample.Attribute;
import org.dei.perla.core.utils.Errors;
import org.dei.perla.lang.executor.BindingException;
import org.dei.perla.lang.executor.BufferView;

import java.util.Collection;
import java.util.List;

/**
 * An interface representing a generic {@code Expression} node.
 *
 * <p>
 * PerLa expression nodes are divided in two categories: complete and
 * incomplete.
 * Complete nodes are fully specified expression, whose result can always be
 * computed using the {@code run} method. Complete nodes are always
 * associated with a {@link DataType} value that represents the type of the
 * expression result.
 *
 * <p>
 * Incomplete nodes, on the other hand, are not fully specified. This type of
 * node allows the parser to deal with uncertainty when parsing Fpc attribute
 * identifiers, whose specific type is only known after the query itself has
 * been parsed. Incomplete nodes may not have a {@link DataType}, and their
 * execution may lead to undefined behaviour.
 *
 * <p>
 * Incomplete nodes can be reified into complete nodes using the {@code
 * bind} method. This method takes as argument the list of attributes
 * available in a specific FPC, and uses it to bind the fields requested
 * in the query with the actual attributes exported by the Fpc where the
 * query is to be run.
 *
 * <p>
 * It is important to note that the bind method is not guaranteed to always
 * return a complete {@code Expression} node; this situation may present
 * itself when the original incomplete expression requires one or more
 * attributes that are not exported by the selected Fpc.
 *
 * <p>
 * The user is advised to check whether the {@code Expression} is complete
 * and correct before computing its result.
 *
 * @author Guido Rota 23/02/15.
 */
public abstract class Expression {

    /**
     * Returns the result type of this {@code Expression}.
     *
     * <p>
     * This method returns {@code null} if the {@code Expression} is not
     * complete.
     *
     * @return result type of the {@code Expression}, {@code null} if the
     * expression is not complete.
     */
    public abstract DataType getType();

    /**
     * Indicates if the {@code Expression} is complete, and can therefore be
     * run.
     *
     * @return true if the {@code Expression} is complete, false otherwise.
     */
    public abstract boolean isComplete();

    /**
     * Binds the {@code Expression} to the attributes generated by a specific
     * Fpc.
     *
     * <p>
     * The {@code bound} parameter has a double functionality. The {@code
     * bind} method stores in this list the attributes that have effectively
     * been bound to the {@code Expression}, and can therefore be used to
     * infer which FPC {@link Attribute}s have been bound to the {@code
     * Expression}.
     *
     * <p>
     * The binding operation may add new errors to the error tracking object
     * if the type of the attributes passed as parameter are incompatible
     * with the operations being performed.
     *
     * @param atts list of {@link Attribute}s generated by the Fpc
     * @param bound list of {@link Attribute}s actually bound to the expression
     * @param err error tracking object
     * @return new {@code Expression} instance bound to the data attributes
     * passed as parameter.
     */
    public abstract Expression bind(Collection<Attribute> atts,
            List<Attribute> bound, Errors err);

    /**
     * Helper method employed to determine the index in the bound {@link
     * Attribute} {@link List} of a given {@link Attribute} identifier.
     *
     * @param id {@link Attribute} identifier
     * @param bound bound {@link Attribute} {@link List}
     * @return index of the {@link Attribute} with the given identifier, -1
     * if not found
     */
    public final static int indexOf(String id, List<Attribute> bound) {
        int i = 0;
        for (Attribute a : bound) {
            if (a.getId().equals(id)) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public final static Attribute getById(String id,
            Collection<Attribute> atts) {
        for (Attribute a : atts) {
            if (a.getId().equals(id)) {
                return a;
            }
        }
        return null;
    }

    /**
     * Runs the expression on the data generated by the Fpc.
     *
     * @param sample sample containing the attribute data to be used for
     *               computing the expression.
     * @param buffer complete {@link Buffer} view used to compute aggregates
     *
     * @return result of the computation.
     */
    public abstract Object run(Object[] sample, BufferView buffer);

}
