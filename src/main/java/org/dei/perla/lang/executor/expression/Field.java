package org.dei.perla.lang.executor.expression;

import org.dei.perla.core.descriptor.DataType;
import org.dei.perla.core.record.Attribute;
import org.dei.perla.lang.executor.BufferView;

import java.util.*;

/**
 * An {@link Expression} for accessing the value of a specific Fpc
 * attribute sample.
 *
 * <p>
 * Newly created {@code Field} objects must be bound to an actual attribute
 * list before being used.
 *
 * @author Guido Rota 23/02/15.
 */
public final class Field implements Expression {

    private final String id;
    private final Set<String> fields;

    /**
     * Creates a new Field for accessing the value of a data attribute
     * generated by an Fpc.
     *
     * @param id attribute identifier
     */
    public Field(String id) {
        this.id = id;
        Set<String> fs = new TreeSet<>();
        fs.add(id);
        fields = Collections.unmodifiableSet(fs);
    }

    public String getId() {
        return id;
    }

    @Override
    public DataType getType() {
        return null;
    }

    @Override
    public boolean isComplete() {
        return false;
    }

    @Override
    public boolean hasErrors() {
        return false;
    }

    @Override
    public Set<String> getFields() {
        return fields;
    }

    @Override
    public Expression bind(List<Attribute> atts) {
        int i = 0;
        for (Attribute a : atts) {
            if (!a.getId().equals(id)) {
                i++;
                continue;
            }
            if (a.getType() == DataType.BOOLEAN) {
                return new ConcreteBooleanField(i, fields);
            } else {
                return new ConcreteField(i, a.getType(), fields);
            }
        }
        return this;
    }

    @Override
    public Object run(Object[] record, BufferView buffer) {
        return null;
    }

    private static class ConcreteField implements Expression {

        protected final int idx;
        protected final DataType type;
        protected final Set<String> fields;

        private ConcreteField(int idx, DataType type, Set<String> fields) {
            this.idx = idx;
            this.type = type;
            this.fields = fields;
        }

        @Override
        public DataType getType() {
            return type;
        }

        @Override
        public boolean isComplete() {
            return true;
        }

        @Override
        public boolean hasErrors() {
            return false;
        }

        @Override
        public Set<String> getFields() {
            return fields;
        }

        @Override
        public Expression bind(List<Attribute> atts) {
            return this;
        }

        @Override
        public Object run(Object[] record, BufferView buffer) {
            return record[idx];
        }

    }

    /**
     * A special concrete field type deisgned to handle boolean values. This
     * field is responsible for translating the boolean data received from
     * the {@link Fpc} object into a {@link LogicValue}, which can then be
     * used in PerLa query expressions.
     */
    private static final class ConcreteBooleanField extends ConcreteField {

        private ConcreteBooleanField(int idx, Set<String> fields) {
            super(idx, DataType.BOOLEAN, fields);
        }

        @Override
        public Object run(Object[] record, BufferView buffer) {
            Object o = record[idx];

            if (o == null) {
                return null;
            } else if ((Boolean) o) {
                return LogicValue.TRUE;
            } else {
                return LogicValue.FALSE;
            }
        }

    }

}
