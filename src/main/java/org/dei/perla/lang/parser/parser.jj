/* Copyright (C) 2008  Romolo Camplani, Marco Fortunato, Marco Marelli, Guido Rota, Fabio A. Schreiber et al.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
options
{
    JDK_VERSION = "1.8";
    IGNORE_CASE = true;
    STATIC = false;
}

PARSER_BEGIN(ParserAST)

    package org.dei.perla.lang.parser;

    import java.time.temporal.TemporalUnit;
    import java.time.temporal.ChronoUnit;
    import java.util.List;
    import java.util.ArrayList;

    import org.dei.perla.lang.parser.ast.*;

    import org.dei.perla.lang.query.expression.*;
    import org.dei.perla.lang.query.statement.*;

    import org.dei.perla.core.fpc.DataType;
    import org.dei.perla.core.fpc.Attribute;

    public final class ParserAST {

        private String getPosition(Token t) {
            return "line " + t.beginLine + ", column " + t.beginColumn;
        }

    }

PARSER_END(ParserAST)

/*
 * SEPARATORS
 */
SKIP :
{
    " "
    |
    "\r"
    |
    "\t"
    |
    "\n"
}

/*
 *	COMMENTS
 */
MORE:
{
    "/*" : COMMENT
}

<COMMENT> MORE:
{
    <~[]>
}

<COMMENT> SKIP:
{
    "*/" : DEFAULT
}

/*
 * CREATE CLAUSE
 */
TOKEN :
{
    < KEYWORD_CREATE:   "CREATE" >
    |
    < KEYWORD_AS:       "AS"     >
}

/*
 * INSERT CLAUSE
 */
TOKEN :
{
    < KEYWORD_INSERT:   "INSERT" >
    |
    < KEYWORD_INTO:     "INTO" >
}

/*
 * EVERY CLAUSE
 */
TOKEN :
{
    < KEYWORD_EVERY:        "EVERY"        >
    |
    < KEYWORD_IN:           "IN"           >
}

/*
 * SELECT CLAUSE
 */
TOKEN :
{
    < KEYWORD_SELECT:    "SELECT"   >
}

/*
 * WHERE CLAUSE
 */
TOKEN :
{
    < KEYWORD_WHERE:     "WHERE" >
}

/*
 * GROUP BY CLAUSE
 */
TOKEN :
{
    < KEYWORD_GROUP:     "GROUP"  >
    |
    < KEYWORD_BY:        "BY"     >
    |
    // Keyword employed to define the number of groups created by a timestamp
    // aggregation
    < KEYWORD_GROUPS:    "GROUPS" >
}

/*
 * HAVING CLAUSE
 */
TOKEN :
{
    < KEYWORD_HAVING:    "HAVING" >
}

/*
 * UP TO CLAUSE
 */
TOKEN :
{
    < KEYWORD_UP:        "UP" >
    |
    < KEYWORD_TO:        "TO" >
}

/*
 * ON EMPTY SELECTION CLAUSE
 */
TOKEN :
{
    < KEYWORD_ON:        "ON"        >
    |
    < KEYWORD_EMPTY:     "EMPTY"     >
    |
    < KEYWORD_SELECTION: "SELECTION" >
    |
//	< KEYWORD_INSERT:    "INSERT"    >
//  |
    < KEYWORD_NOTHING:   "NOTHING"   >
    |
    < KEYWORD_DEFAULT:   "DEFAULT"   >
}

/*
 * SAMPLING CLAUSE
 */
TOKEN :
{
    < KEYWORD_SAMPLING:  "SAMPLING" >
    |
//	< KEYWORD_ON:        "ON"       >
//  |
    < KEYWORD_EVENT:     "EVENT"    >
    |
//	< KEYWORD_IF:        "IF"       >
//  |
//	< KEYWORD_EVERY:     "EVERY"    >
//  |
    < KEYWORD_ELSE:      "ELSE"     >
}

/*
 * ON UNSUPPORTED SAMPLING RATE
 */
TOKEN :
{
//	< KEYWORD_ON:          "ON"          >
//  |
    < KEYWORD_UNSUPPORTED: "UNSUPPORTED" >
    |
    < KEYWORD_SAMPLE:      "SAMPLE"      >
    |
    < KEYWORD_RATE:        "RATE"        >
    |
    < KEYWORD_DO:          "DO"          >
    |
    < KEYWORD_ADAPT:        "ADAPT"        >
}

/*
 * REFRESH CLAUSE
 */
TOKEN :
{
    < KEYWORD_REFRESH:   "REFRESH" >
    |
//	< KEYWORD_EVERY:     "EVERY"   >
//  |
    < KEYWORD_NEVER:     "NEVER"   >
}

/*
 * EXECUTE IF CLAUSE
 */
TOKEN :
{
    < KEYWORD_EXECUTE:        "EXECUTE"   >
    |
    < KEYWORD_IF:             "IF"        >
    |
    < KEYWORD_REQUIRE:        "REQUIRE"   >
    |
    < KEYWORD_ALL:            "ALL"       >
}

/*
 * TERMINATE AFTER CLAUSE
 */
TOKEN :
{
    < KEYWORD_TERMINATE:  "TERMINATE"  >
    |
    < KEYWORD_AFTER:      "AFTER"      >
    |
    < KEYWORD_SELECTIONS: "SELECTIONS" >
}

/*
 * FROM CLAUSE
 */
TOKEN :
{
    < KEYWORD_FROM:      "FROM" >
//  |
//	< KEYWORD_AS:        "AS"   >
}

/*
 * SET CLAUSE
 */
TOKEN :
{
    < KEYWORD_SET:    "SET"  >
//  |
//  < KEYWORD_ON: "ON"    >
}

/*
 * STREAM DATA STRUCTURE
 */
TOKEN :
{
    < KEYWORD_STREAM:   "STREAM"   >
}

/*
 * MISC TOKENS
 */
TOKEN :
{
    < KEYWORD_SAMPLES:  "SAMPLES"  >
    |
    < KEYWORD_ONE:      "ONE"      >
    |
    < KEYWORD_IS:       "IS" >
    |
    < KEYWORD_BETWEEN:  "BETWEEN"  >
    |
    < KEYWORD_LIKE:     "LIKE"     >
}

/*
 * ALGEBRAIC OPERATORS
 */
TOKEN :
{
    < OPERATOR_MULTIPLY: "*" >
    |
    < OPERATOR_DIVIDE:   "/" >
    |
    <OPERATOR_MODULO:    "%" >
    |
    < OPERATOR_PLUS:     "+" >
    |
    < OPERATOR_MINUS:    "-" >
}

/*
 * BOOLEAN OPERATORS
 */
TOKEN :
{
    < OPERATOR_NOT:     "NOT" >
    |
    < OPERATOR_XOR:     "XOR" >
    |
    < OPERATOR_AND:     "AND" >
    |
    < OPERATOR_OR:      "OR"  >
}

/*
 * BITWISE OPERATORS
 */
TOKEN :
{
    < OPERATOR_BITWISE_NOT: "~" >
    |
    < OPERATOR_BITWISE_LSH: "<<" >
    |
    < OPERATOR_BITWISE_RSH: ">>" >
    |
    < OPERATOR_BITWISE_XOR: "^" >
    |
    < OPERATOR_BITWISE_AND: "&" >
    |
    < OPERATOR_BITWISE_OR:  "|"  >
}

/*
 * COMPARISON OPERATORS
 */
TOKEN :
{
    < OPERATOR_GREATER:       ">"  >
    |
    < OPERATOR_LESS:          "<"  >
    |
    < OPERATOR_GREATER_EQUAL: ">=" >
    |
    < OPERATOR_LESS_EQUAL:    "<=" >
    |
    < OPERATOR_EQUAL:         "="  >
    |
    < OPERATOR_NOT_EQUAL:     "<>" | "!=" >
}

/*
 * AGGREGATES
 */
TOKEN :
{
    < FUNCTION_COUNT:     "COUNT"     >
    |
    < FUNCTION_AVG:       "AVG"       >
    |
    < FUNCTION_MAX:       "MAX"       >
    |
    < FUNCTION_MIN:       "MIN"       >
    |
    < FUNCTION_SUM:       "SUM"       >
}

/*
 * TIME UNITS
 */
TOKEN :
{
    < TIMEUNIT_S:  "seconds"      | "s"  >
    |
    < TIMEUNIT_M:  "minutes"      | "m"  >
    |
    < TIMEUNIT_H:  "hours"        | "h"  >
    |
    < TIMEUNIT_MS: "milliseconds" | "millis" | "ms" >
    |
    < TIMEUNIT_D:  "days"         | "d"  >
}

/*
 * DATA TYPES
 */
TOKEN :
{
    < TYPE_ID:             "ID"        >
    |
    < TYPE_TIMESTAMP:      "TIMESTAMP" >
    |
    < TYPE_BOOLEAN:        "BOOLEAN"   >
    |
    < TYPE_INTEGER:        "INTEGER"   >
    |
    < TYPE_FLOAT:          "FLOAT"     >
    |
    < TYPE_STRING:         "STRING"    >
}

/*
 * TYPE CLASS WILDCARDS
 */
TOKEN :
{
    < TYPE_ANY: "ANY" >
}

/*
 * COSTANTS
 * Don't use these tokens, use the corresponding productions instead.
 */

/*
 * CONSTANT NULL
 */
TOKEN :
{
    < CONSTANT_NULL:     "NULL" >
}

/*
 * 3-VALUE BOOLEAN LOGIC (true, false, unknown)
 */
TOKEN :
{
    < CONSTANT_BOOLEAN_TRUE:    "TRUE"    >
    |
    < CONSTANT_BOOLEAN_FALSE:   "FALSE"   >
    |
    < CONSTANT_BOOLEAN_UNKNOWN: "UNKNOWN" >
}

/*
 * NUMERIC CONSTANTS (float and integer)
 */
TOKEN :
{
    <CONSTANT_INTEGER_10: ( <DIGIT> )+ >
    |
    <CONSTANT_INTEGER_16: ( <HEXADECIMAL> ) >
    |
    <CONSTANT_FLOAT:
        ( <CONSTANT_INTEGER_10> )? "." <CONSTANT_INTEGER_10>
    >
}

/*
 * STRING CONSTANTS
 * Strings can be single quoted or double quoted. The quote character is
 * escaped when doubled (e.g., 'test '' string' or "test "" string"
 */
TOKEN :
{
    < CONSTANT_SINGLE_QUOTED_STRING_START: "'"  > : NON_SINGLE_QUOTED_STRING
    |
    < CONSTANT_DOUBLE_QUOTED_STRING_START: "\"" > : NON_DOUBLE_QUOTED_STRING
}

<NON_SINGLE_QUOTED_STRING> TOKEN :
{
    < CONSTANT_SINGLE_QUOTED_STRING_VALUE: (~["'"] | "'" "'")* > : NON_SINGLE_QUOTED_STRING_END
}

<NON_DOUBLE_QUOTED_STRING> TOKEN :
{
    < CONSTANT_DOUBLE_QUOTED_STRING_VALUE: (~["\""] | "\"" "\"")* > : NON_DOUBLE_QUOTED_STRING_END
}

<NON_SINGLE_QUOTED_STRING_END> TOKEN :
{
    < CONSTANT_SINGLE_QUOTED_STRING_END:  "'" > : DEFAULT
}

<NON_DOUBLE_QUOTED_STRING_END> TOKEN :
{
    < CONSTANT_DOUBLE_QUOTED_STRING_END: "\"" > : DEFAULT
}

/*
 * IDENTIFIERS
 */
TOKEN :
{
    < #DIGIT:      ["0" - "9"]               >
    |
    < #LITERAL:    ["a" - "z", "A" - "Z"] >
    |
    < #UNDERSCORE: "_"                       >
    |
    < #HEXADECIMAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
    |
    < IDENTIFIER: ( <LITERAL> | <UNDERSCORE>) ( <DIGIT> | <LITERAL> | <UNDERSCORE> )* >
}

/*
 * PRODUCTIONS
 */

StatementAST Statement(ParserContext ctx):
{
    StatementAST s;
}
{
    (
    s = SetParametersStament(ctx)
    |
    s = CreationStatement(ctx)
    |
    s = InsertionStatement(ctx)
    |
    s = SelectionStatement(ctx)
    )
    { return s; }
}

SetStatementAST SetParametersStament(ParserContext ctx):
{
    int id;
    SetParameterAST p;
    List<SetParameterAST> params = new ArrayList<SetParameterAST>();
    List<Integer> ids = new ArrayList<Integer>();

    Token t;
}
{
    t = <KEYWORD_SET>
    p = SetParameter(ctx)
    { params.add(p); }
    (
        ","
        p = SetParameter(ctx)
        { params.add(p); }
    )*
    <KEYWORD_ON>
    (
        id = ConstantInteger()
        { ids.add(id); }
    )
    (
        ","
        (
            id = ConstantInteger()
            { ids.add(id); }
        )
    )*
    { return new SetStatementAST(t, params, ids); }
}

SetParameterAST SetParameter(ParserContext ctx):
{
    String id;
    ExpressionAST e;

    Token t;
}
{
    id = Identifier()
    { t = token; }
    "="
    e = Expression(ExpressionType.CONSTANT, "set value", ctx)
    { return new SetParameterAST(t, id, e); }
}

CreationStatementAST CreationStatement(ParserContext ctx) :
{
    String stream;
    List<FieldDefinitionAST> fields;
    SelectionStatementAST sel = null;

    Token t;
}
{
    t = <KEYWORD_CREATE>
    <KEYWORD_STREAM>
    stream = Identifier() // Stream name
    fields = FieldDefinitionList(ctx)
    [
        <KEYWORD_AS>
        sel = SelectionStatement(ctx)
    ]
    {
        return new CreationStatementAST(t, stream, fields, sel);
    }
}

List<FieldDefinitionAST> FieldDefinitionList(ParserContext ctx) :
{
    List<FieldDefinitionAST> fields = new ArrayList<FieldDefinitionAST>();
    FieldDefinitionAST f;
}
{
    "("
    f = FieldDefinition(ctx)
    { fields.add(f); }
    (
        ","
        f = FieldDefinition(ctx)
        { fields.add(f); }
    )*
    ")"
    { return fields; }
}

FieldDefinitionAST FieldDefinition(ParserContext ctx) :
{
    String name;
    DataType type;
    ExpressionAST def = ConstantAST.NULL;

    Token t;
}
{
    name = Identifier() // Data structure field
    { t = token; }
    type = Type()
    [
        <KEYWORD_DEFAULT>
        (
            def = Expression(ExpressionType.CONSTANT, "default field value", ctx)
            |
            <CONSTANT_NULL>
        )
    ]
    { return new FieldDefinitionAST(t, name, type, def); }
}

InsertionStatementAST InsertionStatement(ParserContext ctx) :
{
    String stream;
    List<String> fl = new ArrayList<String>();
    SelectionStatementAST sel;

    Token t;
}
{
    t = <KEYWORD_INSERT>
    <KEYWORD_INTO>
    <KEYWORD_STREAM>
    stream = Identifier() // Stream name
    [
        fl = FieldList()
    ]
    sel = SelectionStatement(ctx)
    { return new InsertionStatementAST(t, stream, fl, sel); }
}

List<String> FieldList() :
{
    List<String> fl = new ArrayList<String>();
    String s;
}
{
    "("
    s = Identifier() // DataStructureField
    { fl.add(s); }
    (
        ","
        s = Identifier() // DataStructureField
        { fl.add(s); }
    )*
    ")"
    { return fl; }
}

SelectionStatementAST SelectionStatement(ParserContext ctx) :
{
    WindowSizeAST every;
    List<FieldSelectionAST> fsl;
    GroupByAST gby = null;
    ExpressionAST having = ConstantAST.TRUE;
    WindowSizeAST upto = null;
    OnEmptySelection oes = OnEmptySelection.INSERT_NOTHING;
    SamplingAST sampling;
    Select sel;
    ExpressionAST where = ConstantAST.TRUE;
    ExecutionConditionsAST ec = null;
    WindowSizeAST terminate = null;

    Token t;
}
{
    every = EveryClause(ctx)
    { t = token; }
    <KEYWORD_SELECT>
    fsl = FieldSelectionList(ctx)
    [
        gby = GroupByClause()
    ]
    [
        having = HavingClause(ctx)
    ]
    [
        upto = UpToClause(ctx)
    ]
    [
        oes = OnEmptySelectionClause()
    ]
    sampling = SamplingClause(ctx)
    [
        // This optional where clause filters the sampled values before adding
        // them to the local buffer
        <KEYWORD_WHERE>
        where = Expression(ExpressionType.SIMPLE, "where clause", ctx)
    ]
    [
        ec = ExecutionConditionsClause(ctx)
    ]
    [
        terminate = TerminateAfterClause(ctx)
    ]
    {
        return new SelectionStatementAST(t, every, fsl, gby, having, upto,
                        oes, sampling, where, ec, terminate);
    }
}

WindowSizeAST EveryClause(ParserContext ctx) :
{
    WindowSizeAST ws;
}
{
    <KEYWORD_EVERY>
    ws = WindowSize("every clause", ctx)
    { return ws; }
}

List<FieldSelectionAST> FieldSelectionList(ParserContext ctx) :
{
    List<FieldSelectionAST> fsl = new ArrayList<FieldSelectionAST>();
    FieldSelectionAST fs;
}
{
    fs = FieldSelection(ctx)
    { fsl.add(fs); }
    (
        ","
        fs = FieldSelection(ctx)
        { fsl.add(fs); }
    )*
    { return fsl; }
}

FieldSelectionAST FieldSelection(ParserContext ctx) :
{
    ExpressionAST field;
    ExpressionAST def = ConstantAST.NULL;

    Token t;
}
{
    field = Expression(ExpressionType.AGGREGATE, "select field", ctx)
    { t = token; }
    [
        <KEYWORD_DEFAULT>
        (
            def = Expression(ExpressionType.CONSTANT, "default field value", ctx)
            |
            <CONSTANT_NULL>
        )
    ]
    { return new FieldSelectionAST(t, field, def); }
}

GroupByAST GroupByClause() :
{
    String f;
    List<String> fs = new ArrayList<String>();

    Token t;
}
{
    t = <KEYWORD_GROUP>
    <KEYWORD_BY>
    (
        f = Identifier()
        { fs.add(f); }
    )
    (
        ","
        f = Identifier()
        { fs.add(f); }
    )*
    { return new GroupByAST(t, fs); }
}

ExpressionAST HavingClause(ParserContext ctx) :
{
    ExpressionAST e;

    Token t;
}
{
    <KEYWORD_HAVING>
    { return Expression(ExpressionType.AGGREGATE, "having clause", ctx); }
}

WindowSizeAST UpToClause(ParserContext ctx) :
{
    WindowSizeAST ws;
}
{
    <KEYWORD_UP>
    <KEYWORD_TO>
    ws = WindowSize("upto clause", ctx)
    { return ws; }
}

OnEmptySelection OnEmptySelectionClause() :
{}
{
    <KEYWORD_ON>
    <KEYWORD_EMPTY>
    <KEYWORD_SELECTION>
    <KEYWORD_INSERT>
    (
        <KEYWORD_NOTHING>
        { return OnEmptySelection.INSERT_NOTHING; }
        |
        <KEYWORD_DEFAULT>
        { return OnEmptySelection.INSERT_DEFAULT; }
    )
}

SamplingAST SamplingClause(ParserContext ctx) :
{
    List<String> events;

    List<IfEveryAST> ife;
    RatePolicy policy = RatePolicy.STRICT;
    RefreshAST refresh = RefreshAST.NEVER;

    Token t;
}
{
    t = <KEYWORD_SAMPLING>
    (
        events = OnEventClause()
        { return new SamplingEventAST(t, events); }
        |
        (
            ife = IfEveryClause(ctx)
            [
                policy = RatePolicy()
            ]
            [
                refresh = RefreshClause(ctx)
            ]
            { return new SamplingIfEveryAST(t, ife, policy, refresh); }
        )
    )
}

List<String> OnEventClause() :
{
    List<String> evs = new ArrayList<String>();
    String e;
}
{
    <KEYWORD_ON>
    <KEYWORD_EVENT>
    (
        e = Identifier() //FPC Event
        { evs.add(e); }
        (
            ","
            e = Identifier() // FPC Event
            { evs.add(e); }
        )*
    )
    { return evs; }
}

List<IfEveryAST> IfEveryClause(ParserContext ctx) :
{
    List<IfEveryAST> ifeList = new ArrayList<IfEveryAST>();
    IfEveryAST ife;
    EveryAST every;
    ExpressionAST cond;

    Token t;
}
{
    (
        (
            t = <KEYWORD_IF>
            cond = Expression(ExpressionType.SIMPLE, "if-every clause", ctx)
            every = EveryDuration(ctx)
            {
                ife = new IfEveryAST(t, cond, every);
                ifeList.add(ife);
            }
        )+
        (
            t = <KEYWORD_ELSE>
            every = EveryDuration(ctx)
            {
                ife = new IfEveryAST(t, ConstantAST.TRUE, every);
                ifeList.add(ife);
            }
        )
        { return ifeList; }
    )
    |
    (
        every = EveryDuration(ctx)
        {
            ife = new IfEveryAST(token, ConstantAST.TRUE, every);
            ifeList.add(ife);
        }
    )
    { return ifeList; }
}

EveryAST EveryDuration(ParserContext ctx) :
{
    ExpressionAST value;
    TemporalUnit unit;

    Token t;
}
{
    t = <KEYWORD_EVERY>
    value = Expression(ExpressionType.SIMPLE, "every clause", ctx)
    unit = TimeUnit()
    {
        return new EveryAST(t, value, unit);
    }
}

RatePolicy RatePolicy() :
{}
{
    <KEYWORD_ON>
    <KEYWORD_UNSUPPORTED>
    <KEYWORD_SAMPLE>
    <KEYWORD_RATE>
    (
        (
            <KEYWORD_DO>
            <OPERATOR_NOT>
            <KEYWORD_SAMPLE>
            { return RatePolicy.STRICT; }
        )
        |
        (
            <KEYWORD_ADAPT>
            { return RatePolicy.ADAPTIVE; }
        )
    )
}

RefreshAST RefreshClause(ParserContext ctx) :
{
    List<String> es;
    ExpressionAST value;
    TemporalUnit unit;

    Token t;
}
{
    t = <KEYWORD_REFRESH>
    (
        es = OnEventClause()
        { return new RefreshAST(t, es); }
        |
        <KEYWORD_EVERY>
        value = Expression(ExpressionType.CONSTANT, "refresh every", ctx)
        unit = TimeUnit()
        { return new RefreshAST(t, value, unit); }
        |
        <KEYWORD_NEVER>
        { return RefreshAST.NEVER; }
    )
}

ExecutionConditionsAST ExecutionConditionsClause(ParserContext ctx) :
{
    ExpressionAST cond = ConstantAST.TRUE;
    NodeSpecificationsAST specs = null;
    RefreshAST r = RefreshAST.NEVER;

    Token t;
}
{
    t = <KEYWORD_EXECUTE>
    [
        <KEYWORD_IF>
        cond = Expression(ExpressionType.SIMPLE, "execute if clause", ctx)
    ]
    [
        specs = NodeSpecifications()
    ]
    [
        r = RefreshClause(ctx)
    ]
    { return new ExecutionConditionsAST(t, cond, specs, r); }
}

NodeSpecificationsAST NodeSpecifications() :
{
    List<Attribute> specs;

    Token t;
}
{
    t = <KEYWORD_REQUIRE>
    (
        specs = SpecificationList()
        { return new NodeSpecificationsAST(t, specs); }
        |
        <KEYWORD_ALL>
        { return NodeSpecificationsAST.ALL; }
    )
}

List<Attribute> SpecificationList() :
{
    List<Attribute> as = new ArrayList<Attribute>();
    Attribute a;
}
{
    a = Specification()
    { as.add(a); }
    (
        ","
        a = Specification()
        { as.add(a); }
    )*
    { return as; }
}

Attribute Specification() :
{
    String id;
    DataType type = DataType.ANY;
}
{
    id = Identifier()
    [
        ":"
        type = Type()
    ]
    { return Attribute.create(id, type); }
}

WindowSizeAST TerminateAfterClause(ParserContext ctx) :
{
    WindowSizeAST ws;
}
{
    <KEYWORD_TERMINATE>
    <KEYWORD_AFTER>
    ws = WindowSize("terminate after clause", ctx)
    { return ws; }
}

/*
 * SIGNS, CONSTANTS, VALUES, ETC.
 */
Sign Sign() :
{}
{
    <OPERATOR_PLUS>
    { return Sign.PLUS; }
    |
    <OPERATOR_MINUS>
    { return Sign.MINUS; }
}

LogicValue ConstantBoolean() :
{}
{
    (
        <CONSTANT_BOOLEAN_TRUE>
        { return LogicValue.TRUE; }
        |
        <CONSTANT_BOOLEAN_FALSE>
        { return LogicValue.FALSE; }
    )
}

float ConstantFloat() :
{}
{
    <CONSTANT_FLOAT>
    { return Float.parseFloat(token.image); }
}

int ConstantInteger() :
{
    int value = 0;
}
{
    (
        <CONSTANT_INTEGER_10>
        { value = Integer.parseInt(token.image); }
        |
        <CONSTANT_INTEGER_16>
        { value = Integer.parseInt(token.image.substring(2), 16); }
    )
    { return value; }
}

String ConstantString() :
{
    Token value;
}
{
    (
        (
        <CONSTANT_SINGLE_QUOTED_STRING_START>
        value = <CONSTANT_SINGLE_QUOTED_STRING_VALUE>
        <CONSTANT_SINGLE_QUOTED_STRING_END>
        )
        |
        (
        <CONSTANT_DOUBLE_QUOTED_STRING_START>
        value = <CONSTANT_DOUBLE_QUOTED_STRING_VALUE>
        <CONSTANT_DOUBLE_QUOTED_STRING_END>
        )
    )
    { return value.image; }
}

ConstantAST Constant() :
{
    Object value;
}
{
    (
        value = ConstantBoolean()
        { return new ConstantAST(token, DataType.BOOLEAN, value); }
        |
        value = ConstantString()
        { return new ConstantAST(token, DataType.STRING, value); }
        |
        LOOKAHEAD(1)
        value = ConstantInteger()
        { return new ConstantAST(token, DataType.INTEGER, value); }
        |
        value = ConstantFloat()
        { return new ConstantAST(token, DataType.FLOAT, value); }
    )
}

ComparisonOperation ComparisonOperation() :
{}
{
    <OPERATOR_GREATER>
    { return ComparisonOperation.GT; }
    |
    <OPERATOR_LESS>
    { return ComparisonOperation.LT; }
    |
    <OPERATOR_GREATER_EQUAL>
    { return ComparisonOperation.GE; }
    |
    <OPERATOR_LESS_EQUAL>
    { return ComparisonOperation.LE; }
    |
    <OPERATOR_EQUAL>
    { return ComparisonOperation.EQ; }
    |
    <OPERATOR_NOT_EQUAL>
    { return ComparisonOperation.NE; }
}

DataType Type() :
{}
{
    <TYPE_ID>
    { return DataType.ID; }
    |
    <TYPE_TIMESTAMP>
    { return DataType.TIMESTAMP; }
    |
    <TYPE_BOOLEAN>
    { return DataType.BOOLEAN; }
    |
    <TYPE_INTEGER>
    { return DataType.INTEGER; }
    |
    <TYPE_FLOAT>
    { return DataType.FLOAT; }
    |
    <TYPE_STRING>
    { return DataType.STRING; }
    |
    <TYPE_ANY>
    { return DataType.ANY; }
}

TemporalUnit TimeUnit() :
{}
{
    <TIMEUNIT_S>
    { return ChronoUnit.SECONDS; }
    |
    <TIMEUNIT_M>
    { return ChronoUnit.MINUTES; }
    |
    <TIMEUNIT_H>
    { return ChronoUnit.HOURS; }
    |
    <TIMEUNIT_MS>
    { return ChronoUnit.MILLIS; }
    |
    <TIMEUNIT_D>
    { return ChronoUnit.DAYS; }
}

AggregateOperation AggregateOperation() :
{}
{
    <FUNCTION_AVG>
    { return AggregateOperation.AVG; }
    |
    <FUNCTION_MIN>
    { return AggregateOperation.MIN; }
    |
    <FUNCTION_MAX>
    { return AggregateOperation.MAX; }
    |
    <FUNCTION_SUM>
    { return AggregateOperation.SUM; }
}

int SelectionsNumber() :
{
    int value;
}
{
    (
        value = ConstantInteger()
        <KEYWORD_SELECTIONS>
        { return value; }
    )
}

WindowSizeAST WindowSize(String src, ParserContext ctx) :
{
    ExpressionAST value;
    TemporalUnit unit;
    WindowSizeAST ws;

    Token t;
}
{
    <KEYWORD_ONE>
    { ws = new WindowSizeAST(token, ConstantAST.ONE); }
    |
    (
        value = Expression(ExpressionType.CONSTANT, src, ctx)
        { t = token; }
        (
            <KEYWORD_SAMPLES>
            { ws = new WindowSizeAST(t, value); }
            |
            unit = TimeUnit()
            { ws = new WindowSizeAST(t, value, unit); }
        )
    )
    { return ws; }
}

String Identifier() :
{
    Token value;
}
{
    value = <IDENTIFIER>
    { return value.image; }
}

/*
 * EXPRESSIONS
 */
ExpressionAST Expression(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
}
{
    e1 = BooleanTerm(type, src, ctx)
    (
        t = <OPERATOR_OR>
        e2 = BooleanTerm(type, src, ctx)
        { e1 = new BoolAST(t, BoolOperation.OR, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST BooleanTerm(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
}
{
    e1 = BooleanFactor(type, src, ctx)
    (
        t = <OPERATOR_AND>
        e2 = BooleanFactor(type, src, ctx)
        { e1 = new BoolAST(t, BoolOperation.AND, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST BooleanFactor(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
}
{
    e1 = BooleanNegation(type, src, ctx)
    (
        t = <OPERATOR_XOR>
        e2 = BooleanNegation(type, src, ctx)
        { e1 = new BoolAST(t, BoolOperation.XOR, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST BooleanNegation(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e;
    boolean invert = false;

    Token t = null;
}
{
    (
        t = <OPERATOR_NOT>
        {
            invert = !invert;
        }
    )*
    e = BooleanPredicate(type, src, ctx)
    {
        if (invert) {
            e = new NotAST(t, e);
        }
        return e;
    }
}

ExpressionAST BooleanPredicate(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e;
}
{
    e = Comparison(type, src, ctx)
    [
        e = Is(e)
        |
        e = Like(e)
        |
        e = Between(e, type, src, ctx)
    ]
    { return e; }
}

ExpressionAST Is(ExpressionAST e) :
{
    boolean invert = false;
    ExpressionAST is;

    Token t;
}
{
    t = <KEYWORD_IS>
    [
        <OPERATOR_NOT>
        { invert = true; }
    ]
    (
        <CONSTANT_BOOLEAN_TRUE>
        { is = new IsAST(t, e, LogicValue.TRUE); }
        |
        <CONSTANT_BOOLEAN_FALSE>
        { is = new IsAST(t, e, LogicValue.FALSE); }
        |
        <CONSTANT_BOOLEAN_UNKNOWN>
        { is = new IsAST(t, e, LogicValue.UNKNOWN); }
        |
        <CONSTANT_NULL>
        { is = new IsNullAST(t, e); }
    )
    {
        if (invert) {
            is = new NotAST(t, is);
        }
        return is;
    }
}

ExpressionAST Like(ExpressionAST e) :
{
    String pattern;
    Expression like;

    Token t;
}
{
    t = <KEYWORD_LIKE>
    pattern = ConstantString()
    { return new LikeAST(t, e, pattern); }
}

ExpressionAST Between(ExpressionAST e, ExpressionType type,
        String src, ParserContext ctx) :
{
    ExpressionAST b;
    ExpressionAST min;
    ExpressionAST max;

    Token t;
}
{
    t = <KEYWORD_BETWEEN>
    min = BitwiseExpression(type, src, ctx)
    <OPERATOR_AND>
    max = BitwiseExpression(type, src, ctx)
    {
        return new BetweenAST(t, e, min, max);
    }
}

ExpressionAST Comparison(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;
    ComparisonOperation op;

    Token t;
}
{
    e1 = BitwiseExpression(type, src, ctx)
    [
        op = ComparisonOperation()
        { t = token; }
        e2 = BitwiseExpression(type, src, ctx)
        {
            e1 = new ComparisonAST(t, op, e1, e2);
        }
    ]
    { return e1; }
}

ExpressionAST BitwiseExpression(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
}
{
    e1 = BitwiseTerm(type, src, ctx)
    (
        t = <OPERATOR_BITWISE_OR>
        e2 = BitwiseTerm(type, src, ctx)
        { e1 = new BitwiseAST(t, BitwiseOperation.OR, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST BitwiseTerm(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
}
{
    e1 = BitwiseFactor(type, src, ctx)
    (
        t = <OPERATOR_BITWISE_AND>
        e2 = BitwiseFactor(type, src, ctx)
        { e1 = new BitwiseAST(t, BitwiseOperation.AND, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST BitwiseFactor(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;

    Token t;
}
{
    e1 = BitwiseShift(type, src, ctx)
    (
        t = <OPERATOR_BITWISE_XOR>
        e2 = BitwiseShift(type, src, ctx)
        { e1 = new BitwiseAST(t, BitwiseOperation.XOR, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST BitwiseShift(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;
    BitwiseOperation op;

    Token t;
}
{
    e1 = BitwiseNegation(type, src, ctx)
    (
        (
            t = <OPERATOR_BITWISE_LSH>
            { op = BitwiseOperation.LSH; }
            |
            t = <OPERATOR_BITWISE_RSH>
            { op = BitwiseOperation.RSH; }
        )
        e2 = BitwiseNegation(type, src, ctx)
        { e1 = new BitwiseAST(t, op, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST BitwiseNegation(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e;
    boolean not = false;

    Token t = null;
}
{
    (
        t = <OPERATOR_BITWISE_NOT>
        { not = !not; }
    )*
    e = ArithmeticExpression(type, src, ctx)
    {
        if (not) {
            e = new BitwiseNotAST(t, e);
        }
        return e;
    }
}

ExpressionAST ArithmeticExpression(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;
    ArithmeticOperation op;

    Token t;
}
{
    e1 = ArithmeticTerm(type, src, ctx)
    (
        (
            t = <OPERATOR_PLUS>
            { op = ArithmeticOperation.ADDITION; }
            |
            t = <OPERATOR_MINUS>
            { op = ArithmeticOperation.SUBTRACTION; }
        )
        e2 = ArithmeticTerm(type, src, ctx)
        { e1 = new ArithmeticAST(t, op, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST ArithmeticTerm(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e1;
    ExpressionAST e2;
    ArithmeticOperation op;

    Token t;
}
{
    e1 = ArithmeticFactor(type, src, ctx)
    (
        (
            t = <OPERATOR_MULTIPLY>
            { op = ArithmeticOperation.PRODUCT; }
            |
            t = <OPERATOR_DIVIDE>
            { op = ArithmeticOperation.DIVISION; }
            |
            t = <OPERATOR_MODULO>
            { op = ArithmeticOperation.MODULO; }
        )
        e2 = ArithmeticFactor(type, src, ctx)
        { e1 = new ArithmeticAST(t, op, e1, e2); }
    )*
    { return e1; }
}

ExpressionAST ArithmeticFactor(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e;
    Sign s = Sign.PLUS;

    Token t = null;
}
{
    [
        s = Sign()
        { t = token; }
    ]
    e = PrimaryExpression(type, src, ctx)
    {
        if (s == Sign.MINUS) {
            e = new InverseAST(t, e);
        }
        return e;
    }
}

ExpressionAST PrimaryExpression(ExpressionType type, String src, ParserContext ctx) :
{
    ExpressionAST e;

    Token t = null;
}
{
    e = Constant()
    { return e; }
    |
    (
        "("
        e = Expression(type, src, ctx)
        { return e; }
        ")"
    )
    |
    { t = getToken(1); }
    e = Aggregate(type, src, ctx)
    {
        if (type != ExpressionType.AGGREGATE) {
            ctx.addError("Aggregate expressions forbidden in " + src +
                " at " + getPosition(t));
            return ConstantAST.NULL;
        } else {
            return e;
        }
    }
    |
    { t = getToken(1); }
    e = AttributeReference()
    {
        if (type == ExpressionType.CONSTANT) {
            ctx.addError("Only constant expressions are allowed in " + src +
                " at " + getPosition(t));
            return ConstantAST.NULL;
        } else {
            return e;
        }
    }
}

AttributeReferenceAST AttributeReference() :
{
    String id;
    DataType type = DataType.ANY;

    Token t;
}
{
    id = Identifier()
    { t = token; }
    [
        ":"
        type = Type()
    ]
    { return new AttributeReferenceAST(token, id, type); }
}

ExpressionAST Aggregate(ExpressionType type, String src, ParserContext ctx) :
{
    AggregateOperation op;
    ExpressionAST operand = ConstantAST.NULL;
    WindowSizeAST ws;
    ExpressionAST filter = ConstantAST.TRUE;
    ExpressionAST e;

    Token t;
}
{
    (
        (
            t = <FUNCTION_COUNT>
            {
                op = AggregateOperation.COUNT;
            }
            "("
            "*"
            ","
            ws = WindowSize("aggregate", ctx)
            [
                ","
                filter = Expression(ExpressionType.SIMPLE, "aggregate filter", ctx)
            ]
            ")"
        )
        |
        (
            op = AggregateOperation()
            { t = token; }
            "("
            operand = Expression(ExpressionType.SIMPLE, "aggregate operand", ctx)
            ","
            ws = WindowSize("aggregate", ctx)
            [
                ","
                filter = Expression(ExpressionType.SIMPLE, "aggregate filter", ctx)
            ]
            ")"
        )
    )
    { return new AggregateAST(t, op, operand, ws, filter); }
}

